codetasty.revision.2.0
{"ts":1500451378,"restoring":false,"user_id":4164,"patch":[{"diffs":[[1,"<?php\r\n\r\nnamespace App\\Http\\Controllers;\r\n\r\nuse Illuminate\\Http\\Request;\r\nuse App\\Models\\Object;\r\nuse App\\Models\\Subdivision;\r\nuse App\\Models\\Institution;\r\nuse App\\Models\\Organ;\r\nuse App\\Models\\Municipality;\r\nuse App\\Http\\Requests\\StoreObject;\r\n\r\nclass ObjectController extends Controller\r\n{\r\n    /**\r\n     * Display a listing of the resource.\r\n     *\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function index()\r\n    {\r\n        $objects = Object::with('subdivision', 'institution', 'organ')\r\n                            ->orderBy('organ_id')\r\n                            ->orderBy('institution_id')\r\n                            ->orderBy('subdivision_id')\r\n                            ->orderBy('name');\r\n        //TODO: Add auth filters depending on user role\r\n        //Example:\r\n        //$objects = $objects->where('subdivision_id', $user->subdivision_id);\r\n        $objects = $objects->paginate(50);\r\n        //transforming flat objects into tree structure\r\n        $grouped_objects = $objects->groupBy('organ.name')->transform(function($item, $k) {\r\n            return [\r\n                'id' => $item[0]->organ_id,\r\n                'institutions' => $item->groupBy('institution.name')->transform(function($item, $k) {\r\n                    return [\r\n                        'id' => $item[0]->institution_id,\r\n                        'subdivisions' => $item->groupBy('subdivision.name')->transform(function($item, $k) {\r\n                            return [\r\n                                'id' => $item[0]->subdivision_id,\r\n                                'objects' => $item\r\n                            ];\r\n                        })\r\n                    ];\r\n                })\r\n            ];\r\n        });\r\n        \r\n        dd($grouped_objects);\r\n\r\n        return view('objects.index', [\r\n            'organs' => $grouped_objects,\r\n            'objects' => $objects\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Show the form for creating a new resource.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function create(Request $request)\r\n    {\r\n        //TODO: probably we could get subdivision_id from authenticated user\r\n        $subdivision_id = intval($request->subdivision);\r\n        $subdivision = Subdivision::find($subdivision_id);\r\n        $subdivisions = [];\r\n        $municipalities = [];\r\n        if ($subdivision) {\r\n            $municipalities = $subdivision->municipalities()->pluck('name', 'municipalities.id');\r\n        }\r\n        //TODO: other roles able to manage multiple subdivisions?\r\n        if ($request->user()->isAdmin()) {\r\n            $subdivisions = Subdivision::all();\r\n        }\r\n\r\n        return view('objects.create',\r\n            compact(['subdivision_id', 'subdivision', 'municipalities', 'subdivisions'])\r\n        );\r\n    }\r\n\r\n    /**\r\n    * Store a newly created resource in storage.\r\n    *\r\n    * @param  \\Illuminate\\Http\\Request  $request\r\n    * @return \\Illuminate\\Http\\Response\r\n    */\r\n    public function store(StoreObject $request)\r\n    {\r\n        $data = $request->all();\r\n        $subdivision = Subdivision::find($data['subdivision_id']);\r\n        $municipality = Municipality::find($data['municipality_id']);\r\n        $institution = $subdivision->institution;\r\n        $organ = $institution->organ;\r\n        $data['institution_id'] = $institution->id;\r\n        $data['organ_id'] = $organ->id;\r\n        $data['district_id'] = $municipality->district_id;\r\n        $data['region_id'] = $organ->region_id;\r\n        $object = Object::create($data);\r\n        $request->session()->flash('alert-success', 'Запись успешно добавлена!');\r\n        return redirect()->route('object.index');\r\n    }\r\n\r\n    /**\r\n     * Display the specified resource.\r\n     *\r\n     * @param  int  $id\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function show($id)\r\n    {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * Show the form for editing the specified resource.\r\n     *\r\n     * @param  int  $id\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function edit(Object $object)\r\n    {\r\n        $municipalities = $object->subdivision->municipalities()->pluck('name', 'municipalities.id');\r\n        $cities = $object->municipality->cities()->pluck('name', 'cities.id');\r\n        return view('objects.edit',\r\n            compact(['object', 'municipalities', 'cities'])\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Update the specified resource in storage.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @param  int  $id\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function update(StoreObject $request, Object $object)\r\n    {\r\n        $object->fill($request->all())->save();\r\n        $request->session()->flash('alert-success', 'Запись успешно обновлена!');\r\n        return redirect()->route('object.index');\r\n    }\r\n\r\n    /**\r\n     * Remove the specified resource from storage.\r\n     *\r\n     * @param  int  $id\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n     public function destroy(Request $request, Object $object)\r\n    {\r\n        $object->delete();\r\n        $request->session()->flash('alert-success', 'Запись успешно удалена!');\r\n        return redirect()->route('object.index');\r\n    }\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":5271}],"length":5271}
{"ts":1500451415,"restoring":false,"user_id":4164,"patch":[{"diffs":[[0,"  \r\n"],[-1,"        dd($grouped_objects);\r\n\r\n"],[0,"    "]],"start1":1742,"start2":1742,"length1":41,"length2":8}],"length":5238}